<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2014-03-10T01:49:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>middleman blogging</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/03/10/middleman_blogging.html"/>
    <id>http://blog.url.com/blog/2014/03/10/middleman_blogging.html</id>
    <published>2014-03-10T01:49:00Z</published>
    <updated>2014-03-10T11:27:42+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;テスト投稿&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>practice for rspec</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/03/10/practice-for-rspec.html"/>
    <id>http://blog.url.com/blog/2014/03/10/practice-for-rspec.html</id>
    <published>2014-03-10T00:12:04Z</published>
    <updated>2014-03-10T11:27:48+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;コード書くのと、RSpec のれんしゅう。&lt;br /&gt;
このループの総テスト数を保証するテストをひとつ書いてもいいかも&lt;/p&gt;

&lt;p&gt;眠くて回らないアタマで書いたっていう言い訳はのこしておく&lt;/p&gt;

&lt;p&gt;{% tweet https://twitter.com/tenki_y/status/442670690517266433 %}&lt;/p&gt;

&lt;p&gt;{% gist gouf/9457227 %}&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text
Finished in 0.00749 seconds
82 examples, 0 failures
&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>guard でテストを自動実行</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/03/10/guard-rspec.html"/>
    <id>http://blog.url.com/blog/2014/03/10/guard-rspec.html</id>
    <published>2014-03-09T17:02:22Z</published>
    <updated>2014-03-10T11:27:33+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Web 上のチュートリアルを通して&lt;br /&gt;
「最初の一歩」くらいはテストのやり方がわかったような、そうじゃないような。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テストを書いて&lt;/li&gt;
  &lt;li&gt;コマンド叩いてテストを走らせて&lt;/li&gt;
  &lt;li&gt;テストに沿ったコードを実装して&lt;/li&gt;
  &lt;li&gt;コマンド叩いてテストを走らせて&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;っていう流れだけど、やっぱりコマンド叩いてテストを走らせるの、めんどう。&lt;/p&gt;

&lt;h2 id="guard-"&gt;Guard で監視・テスト実行&lt;/h2&gt;

&lt;h3 id="section"&gt;インストール&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;text
$echo gem \'guard-rspec\', require: false &amp;gt;&amp;gt; Gemfile
$bundle
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="section-1"&gt;初期化・実行&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;text
$guard init rspec
$guard
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;初期化後に監視対象を設定するファイル Guardfile が生成される&lt;br /&gt;
細かな設定とかはこれを編集すれば良さそう&lt;/p&gt;

&lt;p&gt;編集すると自動でテストを走らせてくれて、mac アプリのgrowl みたいな通知もしてくれる&lt;/p&gt;

&lt;h2 id="link"&gt;Link&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/guard/guard"&gt;guard/guard - GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/guard/guard-rspec"&gt;guard/guard-rspec - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>preview タスクにlivereload を追加</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/03/10/auto-watch-livereload.html"/>
    <id>http://blog.url.com/blog/2014/03/10/auto-watch-livereload.html</id>
    <published>2014-03-09T16:30:23Z</published>
    <updated>2014-03-10T11:27:28+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Rakefile にあるpreview タスクを編集して&lt;br /&gt;
python-livereload が起動するようにしてみた。&lt;/p&gt;

&lt;p&gt;これでrake preview だけで、livereload も一緒に起動するように。&lt;/p&gt;

&lt;h2 id="rakefile-"&gt;Rakefile の編集&lt;/h2&gt;

&lt;p&gt;Rakefile の79行目近辺の、proccess を作ってるコードに&lt;br /&gt;
livereload を加えてみた。&lt;/p&gt;

&lt;p&gt;Rake ってなんだろう。しらべてみよう。&lt;/p&gt;

&lt;h2 id="link"&gt;Link&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://microblog.anthonyestebe.com/2013-11-20/live-reload-with-octopress/"&gt;live reload with octopress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.kyobashi.org/hf/RakeUserGuide/?AboutRakeUserGuide"&gt;RakeUserGuide - Rake ユーザガイド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>octpress with livereload</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/03/09/octpress-with-livereload.html"/>
    <id>http://blog.url.com/blog/2014/03/09/octpress-with-livereload.html</id>
    <published>2014-03-08T21:14:40Z</published>
    <updated>2014-03-10T11:27:10+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;新規ポストの編集・確認作業を楽に。&lt;/p&gt;

&lt;p&gt;Google Chrome のlivereload がサーバを見つけられないとか&lt;br /&gt;
guard-livereload がUbuntu では動いてくれないとか(調査不足&lt;br /&gt;
いろいろ詰まるところがあったけど&lt;br /&gt;
python 版のlivereload をインストールしたら動いてくれた&lt;/p&gt;

&lt;h2 id="python-livereload-"&gt;python-livereload のインストール&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;text
$cd ~
$git clone https://github.com/lepture/python-livereload.git
$cd python-livereload
$sudo python setup.py install
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;easy_install やpip でのインストールでも可。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id="section"&gt;起動させる&lt;/h2&gt;

&lt;p&gt;インストールが終わると、livereload コマンドが使えるようになるので&lt;br /&gt;
livereload に監視対象のフォルダ(静的ページが生成されるフォルダ)をただ渡してあげればOK.&lt;br /&gt;
教えなくてもカレントフォルダ直下を監視対象に動いてくれる。&lt;/p&gt;

&lt;p&gt;あとはOctpress のpreview コマンドと、Chrome 拡張のlivereload をオンにするだけ。&lt;/p&gt;

&lt;h3 id="chrome"&gt;Chrome&lt;/h3&gt;

&lt;p&gt;あ そうだ、拡張機能の設定にある、「ファイルの URL へのアクセスを許可する」をオンにしておかないとうごかないよ。&lt;/p&gt;

&lt;h2 id="link"&gt;Link&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://livereload.readthedocs.org/en/latest/index.html"&gt;LiveReload — Python LiveReload 2.0.0 documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://pypi.python.org/pypi/livereload"&gt;livereload 2.1.0 : Python Package Index&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a title="CSS edits and image changes apply live. CoffeeScript, SASS, LESS and others just work." href="http://livereload.com/"&gt;LiveReload&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>sinatra with rspec</title>
    <link rel="alternate" href="http://blog.url.com/blog/2014/03/09/sinatra-with-rspec.html"/>
    <id>http://blog.url.com/blog/2014/03/09/sinatra-with-rspec.html</id>
    <published>2014-03-08T18:03:27Z</published>
    <updated>2014-03-10T11:27:19+09:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;簡単なsinatra アプリを通して、アプリの'/' にアクセスした時に、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アクセスできているか(HTTP 200 をもらえるか)&lt;/li&gt;
  &lt;li&gt;Hello って返事をもらえるか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をRSpec を利用してテストしてみる。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="section"&gt;セットアップ&lt;/h2&gt;

&lt;h3 id="section-1"&gt;必要なファイルを用意する&lt;/h3&gt;

&lt;p&gt;ターミナルでごにょごにょ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text
$cd ~
$mkcd sinatra_with_rspec
$bundle init
$echo gem \"rspec\" &amp;gt;&amp;gt; Gemfile
$echo gem \"sinatra\" &amp;gt;&amp;gt; Gemfile
$touch main.rb
$touch spec/main_spec.rb
$bundle
$rspec --init
$tree .
.
├── Gemfile
├── Gemfile.lock
├── main.rb
└── spec
    ├── main_spec.rb
    └── spec_helper.rb
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="section-2"&gt;テストの準備&lt;/h3&gt;

&lt;p&gt;テスト前の、必要最低限なコードはこんなかんじに。&lt;/p&gt;

&lt;p&gt;rspec/main_spec.rb にはこんなふうに動いてもらいたいという表題をつけている&lt;br /&gt;
(it xxxx の部分)&lt;/p&gt;

&lt;p&gt;```ruby
# main.rb
require 'bundle'
Bundler.require&lt;/p&gt;

&lt;p&gt;class MyApp &amp;lt; Sinatra::Base
end
```&lt;/p&gt;

&lt;p&gt;```ruby
# rspec/main_spec.rb
require 'spec_helper'
require_relative '../main'&lt;/p&gt;

&lt;p&gt;set :environment, :test&lt;/p&gt;

&lt;p&gt;describe "MyApp" do
  include Rack::Test::Methods&lt;/p&gt;

&lt;p&gt;def app
    #Sinatra::Application
    MyApp.new
  end&lt;/p&gt;

&lt;p&gt;describe "Response Test" do
    context "when accessing '/'" do
      it 'should be get "Hello"'
      it 'should be get OK'
    end
  end
end
```&lt;/p&gt;

&lt;p&gt;それと、spec/spec_helper.rb にはrequire 'rack/test' を追記した。&lt;/p&gt;

&lt;h2 id="section-3"&gt;テストのテスト&lt;/h2&gt;

&lt;p&gt;ここまでで、テストを走らせる準備はできたので、テストを実行してみよう&lt;/p&gt;

&lt;p&gt;```text
$rspec spec/main_spec.rb 
Run options: include {:focus=&amp;gt;true}&lt;/p&gt;

&lt;p&gt;All examples were filtered out; ignoring {:focus=&amp;gt;true}
**&lt;/p&gt;

&lt;p&gt;Pending:
  MyApp Response Test when accessing '/' should be get "Hello"
    # Not yet implemented
    # ./spec/main_spec.rb:16
  MyApp Response Test when accessing '/' should be get OK
    # Not yet implemented
    # ./spec/main_spec.rb:17&lt;/p&gt;

&lt;p&gt;Finished in 0.00044 seconds
2 examples, 0 failures, 2 pending&lt;/p&gt;

&lt;p&gt;Randomized with seed 15081&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;7 - 13 行目に注目。これからテストしていく項目がrspec に認識されて、Pending な状態としてリストアップされている&lt;/p&gt;

&lt;p&gt;あと、テスト内容が自動で文章になっている点にも注目。&lt;/p&gt;

&lt;h2 id="section-4"&gt;テスト内容を書く&lt;/h2&gt;

&lt;h3 id="section-5"&gt;失敗するテストを書く&lt;/h3&gt;

&lt;p&gt;実際に、テストできるようテスト内容を実装していく&lt;/p&gt;

&lt;p&gt;sinatra アプリのルートにアクセスした時の期待する動作として以下のようになってほしいというのを、コードにも同様に書き下していく&lt;/p&gt;

&lt;p&gt;```ruby
require 'spec_helper'
require_relative '../main'&lt;/p&gt;

&lt;p&gt;set :environment, :test&lt;/p&gt;

&lt;p&gt;describe "MyApp" do
  include Rack::Test::Methods&lt;/p&gt;

&lt;p&gt;def app
    #Sinatra::Application
    MyApp.new
  end&lt;/p&gt;

&lt;p&gt;describe "Response Test" do
    context "when accessing '/'" do
      it 'should be get "Hello"' do
        get '/'
        last_response.body.should eq 'Hello'
      end
      it 'should be get OK' do
        get '/'
        last_response.should be_ok
      end
    end
  end
end
```&lt;/p&gt;

&lt;p&gt;では、テストを走らせてみよう&lt;/p&gt;

&lt;p&gt;失敗するに決まってる？ それは本当に？&lt;/p&gt;

&lt;p&gt;```text
rspec spec/main_spec.rb 
Run options: include {:focus=&amp;gt;true}&lt;/p&gt;

&lt;p&gt;Finished in 0.02286 seconds
2 examples, 2 failures&lt;/p&gt;

&lt;p&gt;Failed examples:&lt;/p&gt;

&lt;p&gt;rspec ./spec/main_spec.rb:16 # MyApp Response Test when accessing '/' should be get "Hello"
rspec ./spec/main_spec.rb:20 # MyApp Response Test when accessing '/' should be get OK&lt;/p&gt;

&lt;p&gt;Randomized with seed 41435&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;無事、テストは失敗に終わった。&lt;br /&gt;
RSpec がエラーで止まることもなく&lt;strong&gt;無事にすべてのテストを完了し、失敗するテストがあることを教えてくれた。構文エラーもない、問題なし！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ああっ、肝心のmain.rb にはまだ何も書いていなかった。そうだった。
では、次に進もう&lt;/p&gt;

&lt;h2 id="section-6"&gt;テストにパスするコードを書く&lt;/h2&gt;

&lt;p&gt;テストにどんなふうに動いて欲しいかというのを、ラベル付けもしたし、コードに書き下しもした&lt;/p&gt;

&lt;p&gt;テストにパスするよう、main.rb にコードを書いて、テストを走らせてみよう&lt;/p&gt;

&lt;p&gt;```ruby
require 'bundler'
Bundler.require&lt;/p&gt;

&lt;p&gt;class MyApp &amp;lt; Sinatra::Base
  get '/' do
    'Hello'
  end
end&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;```text
rspec spec/main_spec.rb 
Run options: include {:focus=&amp;gt;true}&lt;/p&gt;

&lt;p&gt;All examples were filtered out; ignoring {:focus=&amp;gt;true}
..&lt;/p&gt;

&lt;p&gt;Finished in 0.0226 seconds
2 examples, 0 failures&lt;/p&gt;

&lt;p&gt;Randomized with seed 9802&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;失敗するテストはなくなって、すべてのテストは問題なく通過した！ オールグリーン！ やったね！&lt;/p&gt;

&lt;h2 id="section-7"&gt;蛇足&lt;/h2&gt;

&lt;p&gt;こんなかんじで、テストと実装を積み重ねていけば、安心してコードを書いていけそう。&lt;/p&gt;

&lt;h2 id="link"&gt;Link&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.sinatrarb.com/testing.html"&gt;Testing Sinatra with Rack::Test&lt;/a&gt; (RSpec の項を参照)&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://betterspecs.org/jp/"&gt;Better Specs { rspec guidelines with ruby }&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[mkcd: mkdir foo &amp;amp;&amp;amp; cd foo&lt;/td&gt;
          &lt;td&gt;Charles Curley's Weblog](http://www.charlescurley.com/blog/articles/mkcd_mkdir_foo____cd_foo/index.html)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.limemo.net/blog/2013/08/%E3%80%90ubuntu%E3%80%91%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0%E3%82%92%E8%A6%8B%E3%82%84%E3%81%99%E3%81%8F%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%80%8Ctree%E3%80%8D.html"&gt;Linuxブログ : 【Ubuntu】ディレクトリ構造を見やすく表示する「tree」コマンドの使い方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
