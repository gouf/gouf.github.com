<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | My Octopress Blog]]></title>
  <link href="http://gouf.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://gouf.github.io/"/>
  <updated>2014-03-10T09:29:51+09:00</updated>
  <id>http://gouf.github.io/</id>
  <author>
    <name><![CDATA[Gou Furuya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[practice for rspec]]></title>
    <link href="http://gouf.github.io/blog/2014/03/10/practice-for-rspec/"/>
    <updated>2014-03-10T09:12:04+09:00</updated>
    <id>http://gouf.github.io/blog/2014/03/10/practice-for-rspec</id>
    <content type="html"><![CDATA[<p>コード書くのと、RSpec のれんしゅう。<br />
このループの総テスト数を保証するテストをひとつ書いてもいいかも</p>

<p>眠くて回らないアタマで書いたっていう言い訳はのこしておく</p>

<p><div class='embed tweet'>Tweet could not be processed</div></p>

<p><div><script src='https://gist.github.com/9457227.js'></script>
<noscript><pre><code>require &#39;spec_helper&#39;

describe &quot;always divisible by 9&quot; do
  (1..100).each do |x|
    first = x.to_s[0]
    last  = x.to_s[1]
    next if first == last
    next if first.nil? or last.nil?
    swap_x = (last + first).to_i
    new_x = (x - swap_x).abs
    it &quot;is #{x}: #{new_x} / 9 is 0&quot; do
      result = new_x % 9
      expect(result).to eq 0
    end
  end
end</code></pre></noscript></div>
</p>

<p><code>text
Finished in 0.00749 seconds
82 examples, 0 failures
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[guard でテストを自動実行]]></title>
    <link href="http://gouf.github.io/blog/2014/03/10/guard-rspec/"/>
    <updated>2014-03-10T02:02:22+09:00</updated>
    <id>http://gouf.github.io/blog/2014/03/10/guard-rspec</id>
    <content type="html"><![CDATA[<p>Web 上のチュートリアルを通して<br />
「最初の一歩」くらいはテストのやり方がわかったような、そうじゃないような。</p>

<ul>
<li>テストを書いて</li>
<li>コマンド叩いてテストを走らせて</li>
<li>テストに沿ったコードを実装して</li>
<li>コマンド叩いてテストを走らせて</li>
</ul>


<p>っていう流れだけど、やっぱりコマンド叩いてテストを走らせるの、めんどう。</p>

<h2>Guard で監視・テスト実行</h2>

<h3>インストール</h3>

<p><code>text
$echo gem \'guard-rspec\', require: false &gt;&gt; Gemfile
$bundle
</code></p>

<h3>初期化・実行</h3>

<p><code>text
$guard init rspec
$guard
</code></p>

<p>初期化後に監視対象を設定するファイル Guardfile が生成される<br />
細かな設定とかはこれを編集すれば良さそう</p>

<p>編集すると自動でテストを走らせてくれて、mac アプリのgrowl みたいな通知もしてくれる</p>

<h2>Link</h2>

<ul>
<li><a href="https://github.com/guard/guard">guard/guard &ndash; GitHub</a></li>
<li><a href="https://github.com/guard/guard-rspec">guard/guard-rspec &ndash; GitHub</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sinatra with rspec]]></title>
    <link href="http://gouf.github.io/blog/2014/03/09/sinatra-with-rspec/"/>
    <updated>2014-03-09T03:03:27+09:00</updated>
    <id>http://gouf.github.io/blog/2014/03/09/sinatra-with-rspec</id>
    <content type="html"><![CDATA[<p>簡単なsinatra アプリを通して、アプリの'/&lsquo; にアクセスした時に、</p>

<ul>
<li>アクセスできているか(HTTP 200 をもらえるか)</li>
<li>Hello って返事をもらえるか</li>
</ul>


<p>をRSpec を利用してテストしてみる。</p>

<!-- more -->


<h2>セットアップ</h2>

<h3>必要なファイルを用意する</h3>

<p>ターミナルでごにょごにょ</p>

<p>```text
$cd ~
$mkcd sinatra_with_rspec
$bundle init
$echo gem \&ldquo;rspec\&rdquo; >> Gemfile
$echo gem \&ldquo;sinatra\&rdquo; >> Gemfile
$touch main.rb
$touch spec/main_spec.rb
$bundle
$rspec &mdash;init
$tree .
.
├── Gemfile
├── Gemfile.lock
├── main.rb
└── spec</p>

<pre><code>├── main_spec.rb
└── spec_helper.rb
</code></pre>

<p>```</p>

<h3>テストの準備</h3>

<p>テスト前の、必要最低限なコードはこんなかんじに。</p>

<p>rspec/main_spec.rb にはこんなふうに動いてもらいたいという表題をつけている<br />
(it xxxx の部分)</p>

<p>```ruby</p>

<h1>main.rb</h1>

<p>require &lsquo;bundle&rsquo;
Bundler.require</p>

<p>class MyApp &lt; Sinatra::Base
end
```</p>

<p>```ruby</p>

<h1>rspec/main_spec.rb</h1>

<p>require &lsquo;spec_helper&rsquo;
require_relative &lsquo;../main&rsquo;</p>

<p>set :environment, :test</p>

<p>describe &ldquo;MyApp&rdquo; do
  include Rack::Test::Methods</p>

<p>  def app</p>

<pre><code>#Sinatra::Application
MyApp.new
</code></pre>

<p>  end</p>

<p>  describe &ldquo;Response Test&rdquo; do</p>

<pre><code>context "when accessing '/'" do
  it 'should be get "Hello"'
  it 'should be get OK'
end
</code></pre>

<p>  end
end
```</p>

<p>それと、spec/spec_helper.rb にはrequire &lsquo;rack/test&rsquo; を追記した。</p>

<h2>テストのテスト</h2>

<p>ここまでで、テストを走らせる準備はできたので、テストを実行してみよう</p>

<p>```text
$rspec spec/main_spec.rb
Run options: include {:focus=>true}</p>

<p>All examples were filtered out; ignoring {:focus=>true}
**</p>

<p>Pending:
  MyApp Response Test when accessing &lsquo;/&rsquo; should be get &ldquo;Hello&rdquo;</p>

<pre><code># Not yet implemented
# ./spec/main_spec.rb:16
</code></pre>

<p>  MyApp Response Test when accessing &lsquo;/&rsquo; should be get OK</p>

<pre><code># Not yet implemented
# ./spec/main_spec.rb:17
</code></pre>

<p>Finished in 0.00044 seconds
2 examples, 0 failures, 2 pending</p>

<p>Randomized with seed 15081</p>

<p>```</p>

<p>7 &ndash; 13 行目に注目。これからテストしていく項目がrspec に認識されて、Pending な状態としてリストアップされている</p>

<p>あと、テスト内容が自動で文章になっている点にも注目。</p>

<h2>テスト内容を書く</h2>

<h3>失敗するテストを書く</h3>

<p>実際に、テストできるようテスト内容を実装していく</p>

<p>sinatra アプリのルートにアクセスした時の期待する動作として以下のようになってほしいというのを、コードにも同様に書き下していく</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;
require_relative &lsquo;../main&rsquo;</p>

<p>set :environment, :test</p>

<p>describe &ldquo;MyApp&rdquo; do
  include Rack::Test::Methods</p>

<p>  def app</p>

<pre><code>#Sinatra::Application
MyApp.new
</code></pre>

<p>  end</p>

<p>  describe &ldquo;Response Test&rdquo; do</p>

<pre><code>context "when accessing '/'" do
  it 'should be get "Hello"' do
    get '/'
    last_response.body.should eq 'Hello'
  end
  it 'should be get OK' do
    get '/'
    last_response.should be_ok
  end
end
</code></pre>

<p>  end
end
```</p>

<p>では、テストを走らせてみよう</p>

<p>失敗するに決まってる？ それは本当に？</p>

<p>```text
rspec spec/main_spec.rb
Run options: include {:focus=>true}</p>

<p>Finished in 0.02286 seconds
2 examples, 2 failures</p>

<p>Failed examples:</p>

<p>rspec ./spec/main_spec.rb:16 # MyApp Response Test when accessing &lsquo;/&rsquo; should be get &ldquo;Hello&rdquo;
rspec ./spec/main_spec.rb:20 # MyApp Response Test when accessing &lsquo;/&rsquo; should be get OK</p>

<p>Randomized with seed 41435</p>

<p>```</p>

<p>無事、テストは失敗に終わった。<br />
RSpec がエラーで止まることもなく<strong>無事にすべてのテストを完了し、失敗するテストがあることを教えてくれた。構文エラーもない、問題なし！</strong></p>

<p>ああっ、肝心のmain.rb にはまだ何も書いていなかった。そうだった。
では、次に進もう</p>

<h2>テストにパスするコードを書く</h2>

<p>テストにどんなふうに動いて欲しいかというのを、ラベル付けもしたし、コードに書き下しもした</p>

<p>テストにパスするよう、main.rb にコードを書いて、テストを走らせてみよう</p>

<p>```ruby
require &lsquo;bundler&rsquo;
Bundler.require</p>

<p>class MyApp &lt; Sinatra::Base
  get &lsquo;/&rsquo; do</p>

<pre><code>'Hello'
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>```text
rspec spec/main_spec.rb
Run options: include {:focus=>true}</p>

<p>All examples were filtered out; ignoring {:focus=>true}
..</p>

<p>Finished in 0.0226 seconds
2 examples, 0 failures</p>

<p>Randomized with seed 9802</p>

<p>```</p>

<p>失敗するテストはなくなって、すべてのテストは問題なく通過した！ オールグリーン！ やったね！</p>

<h2>蛇足</h2>

<p>こんなかんじで、テストと実装を積み重ねていけば、安心してコードを書いていけそう。</p>

<h2>Link</h2>

<ul>
<li><a href="http://www.sinatrarb.com/testing.html">Testing Sinatra with Rack::Test</a> (RSpec の項を参照)</li>
<li><a href="http://betterspecs.org/jp/">Better Specs { rspec guidelines with ruby }</a></li>
<li><a href="http://www.charlescurley.com/blog/articles/mkcd_mkdir_foo____cd_foo/index.html">mkcd: mkdir foo &amp;&amp; cd foo | Charles Curley&rsquo;s Weblog</a></li>
<li><a href="http://www.limemo.net/blog/2013/08/%E3%80%90ubuntu%E3%80%91%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E6%A7%8B%E9%80%A0%E3%82%92%E8%A6%8B%E3%82%84%E3%81%99%E3%81%8F%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%80%8Ctree%E3%80%8D.html">Linuxブログ : 【Ubuntu】ディレクトリ構造を見やすく表示する「tree」コマンドの使い方</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
