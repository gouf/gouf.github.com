<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<<<<<<< HEAD
  <title><![CDATA[Category: LiveReload | gouf.github.com]]></title>
  <link href="http://gouf.github.com/blog/categories/livereload/atom.xml" rel="self"/>
  <link href="http://gouf.github.com/"/>
  <updated>2012-10-13T23:24:19+09:00</updated>
  <id>http://gouf.github.com/</id>
  <author>
    <name><![CDATA[gouf]]></name>
=======
  <title><![CDATA[Category: livereload | My Octopress Blog]]></title>
  <link href="http://gouf.github.io/blog/categories/livereload/atom.xml" rel="self"/>
  <link href="http://gouf.github.io/"/>
  <updated>2014-03-10T09:29:51+09:00</updated>
  <id>http://gouf.github.io/</id>
  <author>
    <name><![CDATA[Gou Furuya]]></name>
>>>>>>> github
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[LiveReloadで簡単プレビュー]]></title>
    <link href="http://gouf.github.com/blog/2012/10/13/auto-reload/"/>
    <updated>2012-10-13T15:34:00+09:00</updated>
    <id>http://gouf.github.com/blog/2012/10/13/auto-reload</id>
    <content type="html"><![CDATA[<h2>ブログ編集の自動プレビュー</h2>

<p>Octopress のwatch 機能とWebRick に加えて、LiveReload を利用することで、編集とプレビューを簡単にする。</p>

<h2>編集とプレビューのサイクル</h2>

<p>新しく記事を生成して、編集して、気になったらプレビューして...といったサイクルで編集してたけど、LiveReload をつかえば より簡単にこのサイクルを回せるんじゃないかって思った。</p>

<h3>LiveReload</h3>

<p>Webブラウザと連携して、ローカルファイルの更新があった時に、ブラウザのページを、自動でリロードしてくれる。</p>

<p>Mac 版とWindows 版と、あとLinux 版がある。
いまMac 使ってるから、Mac で話をすすめるよ。</p>

<p><a href="http://livereload.com/" title="LiveReload">公式サイト</a>からダウンロードしてインストールして、Octopress のフォルダを監視下に置けばおっけ。</p>

<h3>rake watch コマンド</h3>

<p>Octopress にはファイル変更を監視して、自動的にrake generate してくれる、rake watch コマンドが用意されている。
動かしてみるとこんな感じ。</p>

<p><img src="http://gyazo.com/89fcbaca3dba39a451a7c00416384208.png" alt="rake watchコマンド" /></p>

<h3>rake preview コマンド</h3>

<p>そいで、rake preview を叩くと、WebRick が起動して、<a href="http://localhost:4000">http://localhost:4000</a>でブログのプレビューが出来る。
rake preview にはrake watch の機能もあるので、プレビューしながら編集する場合は、こっちのコマンドを使う。</p>

<h3>おわり。</h3>

<p>rake preview + LiveReload でラクな編集作業をしましょ。</p>

<h2>捕捉</h2>

<p>Octopress もLiveReload もファイルの変更を検知したタイミングで動いてるから、もしかするとページの変換処理よりリロードのほうが早くなってしまうかもしれない。</p>

<p>そんなときは、LiveReload の設定で、リロードのタイミングを遅らせるといいかも。</p>

<p><img src="http://gyazo.com/16dc2c9a32f44f49810d3986a0fc775c.png" alt="LiveReload 設定" /></p>

<h2>リンク</h2>

<ul>
<li><a href="http://livereload.com/">LiveReload</a></li>
</ul>


<h2>蛇足</h2>

<ul>
<li>rake generate が失敗すると思ったら レイアウトやタイトルを設定するトコの書式に誤りがあった。
タイトルを<code>"</code>で括ってるかとか、categories: のあとに半角スペースをつけてるかとか。すごく地味なミスだった。

<ul>
<li>(これだからYAMLはいやなんだ...!!)</li>
</ul>
</li>
=======
    <title type="html"><![CDATA[preview タスクにlivereload を追加]]></title>
    <link href="http://gouf.github.io/blog/2014/03/10/auto-watch-livereload/"/>
    <updated>2014-03-10T01:30:23+09:00</updated>
    <id>http://gouf.github.io/blog/2014/03/10/auto-watch-livereload</id>
    <content type="html"><![CDATA[<p>Rakefile にあるpreview タスクを編集して<br />
python-livereload が起動するようにしてみた。</p>

<p>これでrake preview だけで、livereload も一緒に起動するように。</p>

<h2>Rakefile の編集</h2>

<p>Rakefile の79行目近辺の、proccess を作ってるコードに<br />
livereload を加えてみた。</p>

<p>Rake ってなんだろう。しらべてみよう。</p>

<h2>Link</h2>

<ul>
<li><a href="http://microblog.anthonyestebe.com/2013-11-20/live-reload-with-octopress/">live reload with octopress</a></li>
<li><a href="http://www.kyobashi.org/hf/RakeUserGuide/?AboutRakeUserGuide">RakeUserGuide &ndash; Rake ユーザガイド</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octpress with livereload]]></title>
    <link href="http://gouf.github.io/blog/2014/03/09/octpress-with-livereload/"/>
    <updated>2014-03-09T06:14:40+09:00</updated>
    <id>http://gouf.github.io/blog/2014/03/09/octpress-with-livereload</id>
    <content type="html"><![CDATA[<p>新規ポストの編集・確認作業を楽に。</p>

<p>Google Chrome のlivereload がサーバを見つけられないとか<br />
guard-livereload がUbuntu では動いてくれないとか(調査不足<br />
いろいろ詰まるところがあったけど<br />
python 版のlivereload をインストールしたら動いてくれた</p>

<h2>python-livereload のインストール</h2>

<p><code>text
$cd ~
$git clone https://github.com/lepture/python-livereload.git
$cd python-livereload
$sudo python setup.py install
</code></p>

<p>easy_install やpip でのインストールでも可。<br /></p>

<h2>起動させる</h2>

<p>インストールが終わると、livereload コマンドが使えるようになるので<br />
livereload に監視対象のフォルダ(静的ページが生成されるフォルダ)をただ渡してあげればOK.<br />
教えなくてもカレントフォルダ直下を監視対象に動いてくれる。</p>

<p>あとはOctpress のpreview コマンドと、Chrome 拡張のlivereload をオンにするだけ。</p>

<h3>Chrome</h3>

<p>あ そうだ、拡張機能の設定にある、「ファイルの URL へのアクセスを許可する」をオンにしておかないとうごかないよ。</p>

<h2>Link</h2>

<ul>
<li><a href="http://livereload.readthedocs.org/en/latest/index.html">LiveReload — Python LiveReload 2.0.0 documentation</a></li>
<li><a href="https://pypi.python.org/pypi/livereload">livereload 2.1.0 : Python Package Index</a></li>
<li><a href="http://livereload.com/" title="CSS edits and image changes apply live. CoffeeScript, SASS, LESS and others just work.">LiveReload</a></li>
>>>>>>> github
</ul>

]]></content>
  </entry>
  
</feed>
